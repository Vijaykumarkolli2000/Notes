	AWS
********************

Cloud Challenges:
	* High cost of procuring infrastructure.
	* Needs ahead of time planning.
	* Low infrastructure utilization.
	* Dedicated infrastructure maintenance team.


	AWS:
-------------------
Amazon Web Services(AWS)

* Leading cloud service provider
* 200+ services 
* Reliable, secure and cost-effective

Best paths :--> Amazon S3, EC2, Amazon EBS, ELB, ECS
	* Cloud applications make use of multiple AWS services.
	* There is no single path to learn these services independently.

Setting up AWS account:
 --> Create AWS account.
 --> Set up an IAM user

IAM & Best practice
---------------------
IAM: Identity & Access Management
 Authentication(the right user?) and
 Authorization(the right access?)
 Root User: User we created our AWS account with--> credentials as email and password.
						--> Do not use root user in day today activities.
						--> create new IAM user and use regular activity.

EC2:
----
Elastic Compute Cloud.

Features:--> Create & manage lifecycle of EC2 instance
	     Attach storage(&network storage) to your EC2 instance
	     Manage network connectivity for EC2 instance
	     Load balancing and auto scaling for multiple EC2 instance


sudo su	---> super user(Root User).
yum update -y	---> existing package and software file update up to date.
yum install httpd  --->install appach server
systemctl start httpd
systemctl enable httpd
echo "Hello World" > /var/www/html/index.html ---> index page open


EC2 Concepts: -->AMI [Amazon Machine Imag]
	EC2 AMI-->EC2 Instances

	Three AMI sources:
		* provided by AWS.
		* AWS market place: Online store for customized AMIs.per hour billing.
		* Customized AMIs: created by you.

EC2 Concepts--> Instance families
 * Optimized combination of compute(cpu,Gpu),memory,disk(storage) and Networking for specific 	.
 * 270+  instances across 40+ different workloads.
	> m(m4,m5,m6) --> General purpose.(running simple web appliction and balancing)
	> c(c4,c5,c5n) --> compute optimized(cpu optimized)
	> r(r4,r5,r5a,r5n) --> Memory(RAM) optimized.
	> i(i3) --> storage (I/O) optimized.
	> g(g3,g4) --> GPU optimize - Graphics processing.

EC2 Importent Concepts - Security Groups
	User <---> Security Group <---> EC2 Instance
 security group have inbound(Http, SSH) and outbound(All traffic or empty->from the ec2 instance we can't make to any call)

 Virtual firewall(software) to control all incoming and outgoing traffic to/from AWS resources (EC2 instances, Database etc).
 Provides additional layer of security - defense in depth


Security Groups Rules:
 * Default deny -> If there are no rules configured, no outbound/inbound traffic is allowed.
	> if you delete all inbound rules no body access to EC2 instance.
	> if you delete all outbound rules we can't make s to the any calls to the EC2 instance.

  [There is No rules = No specific traffic direction.]
 * Allows allow rules only.
 * Separate rules for inbound and outbound traffic.
 

EC2 Security - Key pairs:
 EC2 uses public key cryptography for protecting login credentials.
 key-pairs --> public and private key-pairs.
	Public key is stored by EC2 instance.
	Private key is stored by Customer.

EC2 IP addresses:
---------------------
 * Public IP addresses are internet addressable.
 * Private IP addresses are internal to corporate network.
 * You can't have two resources with same public IP address.
 * Two different networks can have resources with same private IP address
 * All EC2 instances are assigned private IP address.
 * when we stop EC2 instance public IP address is lost.

Elastic IP addresses:
 1) Scenario: How do you get a constant public IP address for a EC2 instance?
	=> Quick and dirty way is to use an Elastic IP.
  Elastic IP can be swicthed to another EC2 instance within the same region.
  Elastic IP will remains it's same IP address whenever You stoped also.
  Elastic IP address they might be charged if you are use or not use. 


Reducing Billing:
------------------
 Set Billing Alerts
 First weak-> Monitor every day billing dashboard.
 Stop resources when your not using it.
 Understand free tier and 12 months limit.
 understand how pricing works in different regions.

CloudWatch is basically monitoring the server(Resources).
Budget is monitoring the bill.


IAAS:-[Infrastructure as a service]
 * Use only infrastructure from cloud provider.
	> Computers(virtual or on dedicated hardware), data storage space and networking features 
 * also called "Lift and Shift".
ex: Using EC2 to deployee an application.
    Using EC2 to create your DataBase

Cloud Provider is responssible for Physical Infrastructure(Hardware, Networking) and Virtualization layer(HyperVisor, Host OS).
Customer is responsible for: 
 Guest OS update and patches,
 application code and runtime,
 Availability, fault tolerance, scalability etc.

PAAS:- [Platform as a service]
 * Use platform provide by a cloud
 * cloud provider is responsible for:
	OS(upgrades and patches)
	Application runtime
	Autoscaling, availability & loadbalancing etc
 * customer responsible is:
	Application code 
	Configuration


AWS Managed services Offering:

ELB:[Elastic Load Balancer] Distribute incoming traffic across multiple targets.
AWS Elastick BeanStalk - Run and manage web Apps.
Amazon RDS - Relational DataBase - Mysql,oracle,SQL server. 


Elastic Load Balancer:
---------------------
Person --> ELB --> 1...n
* Distribute traffic across EC2 instances in one or more AZs in a single region.
* Managed Service - AWS ensures that it is highly available.
* Auto-scale to handle high loads.
* Load Balancer can be private or public.
* Health Checks -> route traffic to healthy instances.

Three Types of Load Balancers:

1) Classic Load Balancer.
2) Application Load Balancer.
3) Network Load Balancer.

Availability:
-------------
 * Are the applications available when the user need them?
 * Percentage of application availability -> 4'-9s, (most of the web applications are run at the this availability)

Availability Basics EC2 and ELB:
 * Deploy to multiple AZs
 * Deploy to multiple regions

Scaleable:
----------
 * Vertical Scaleability:
	* Deploying apllications/database to bigger instance.
 	  > A larger hard drive
	  > A faster CPU
	  > More RAM,cpu,I/O, or networking capabilities.
 * There are limits to verticle scaling.
 * Vertical scaling for EC2:
	* Increasing EC2 instance size:
 		> t2.micro to t2.small
		> t2.small to t2.2xlarge


Horizontal Scaling:
-------------------
 * Deploying multiple instances of application/database
 * Low expensive
 * Horizontal Scaling is prefered to vetrticle scaling
	> Vertical scaling has limits.
	> vertical scaling can be expensive.
	> Horizontal scaling increases availability.
 * It needs additional infrastructure.

 * Horizontal Scaling for EC2
	* Distribute EC2 instances
		> In a single AZs
		> In multiple AZs in single region
		> In multiple AZs in multiple regions.
 	* Auto-scaling group
 	* Distribute load:- Elastic Load Balancer.
 
EC2 On-Demand Instances:
-----------------------
* On demand resource provisioning - use and throw!
* Highest cost and highest flexibility.
* Ideal for web Application:
 > web application which recieves spiky traffic(unexpected load traffic).
 > A batch program which has unpredictable runtime and cannot be interupted.
 > a batch program moved from on premises to cloud for the first time.

EC2 spot instances:
* Old Model--> bid a price, highest bider wins.
* New Model--> quote your maximum price.prices decided by long term trends.

EC2 Reserved Instances:
-----------------------
* Reserve EC2 instance ahead of time!
* payment model:
  > No upfront -> $0
  > partial upfront -> $xyz
  > All upfront -> full amount
 cost wise --. all upfront< partial upfront< No upfront.


AWS Elastic BeanStalk:
----------------------
* Next level of platform as a service!
* Simplest way to deploy and scale up your web applications.
	> provide end-to-end web application management.
* Features: 
	> Automatic load balancing.
	> Auto scaling 
	> Managed platform updates
* Appliction health monitring.


Auto Scaling Components:
 *Launch configuration/template(what?)
	>EC2 instance size and AMI
 *Auto scaling group(where?)
	>Min,Max and desired size of ASG
	>Health checks
 *Auto scaling policies(when?)
	>when and how to execute scaling.

Dynamic scaling policy types:
 1) target tracking scaling
 2) simple scaling
 3) step scaling

Serverless:
-----------
Remember:Serverless does Not mean "No Servers".

serverless:
 * you don't worry about infrastructure.
 * flexible scaling
 * Automated high availability
 * pay for use:
	> you don't have to provision servers or capacity!
 * You focus on code and the cloud managed service takes care of all that needed to scale your code to serve millions of requests!

AWS Lamda:
----------
*World before lamda - ELB with EC2 server!
* You don't worry about servers or scaling or Availability
* You only woory about your code!
* You pay for what you use!
	> Number of request
	> Duration of request

AWS Lamda Event Sources:
 * Amazon API Gateway
 * Amazon Cognito
 * Amazon DynamoDB(event)
 * Amazon cloud front(lamda@edge)
 * AWS step Functions
 * Amazon Kinesis
 * Amazon simple storage service
 * Amazon simple Queue service
 * Amazon simple Notification service



Amazon S3[simple storage service]:
----------------------------------
One of the most AWS service.
* Most popular Aws service, very flexible and inexpensive storage service.
* Store large object using key-value pair(approch).
* also called as Object Storage.
* provides rest API to access and modify objects.
* provides unlimited storage.
	> four 9's availability and eleven 9's durability.
	> objects are replicated in a single region (across multiple AZ's)
* Store all type files: text, binary,backup and archive

Amazon S3 Objects and Buckets:
-------------------------------
* Amazon S3 is a global service.NOT associated with region.
	 Bucket is created with AWS region.
* Objects are stored in buckets
	bucket names are globally unique
	bucket names are used as part of object URLs => can containe only lowercase letters, numbers, hyphens and periods.
	unlimited objects in bucket
* Each object is identified by a key value pair
	key is unique in bucket.
	maximum object size is 5TB.

Amazon S3 Storage classes:
1) standard	- frequently accessed data
2) standard-IA	- long lived, infrequently accessed data
3) one zone-IA	- long lived, infrequently accessed data, non critical data
4) intelligent-Tiering	- long lived data with changing.
5) glacier
6) glacier deep archive

Amazon S3 cost:
---------------
Important pricing elements:
	* Cost of storage (per GB)
	* (If applicable ) Retrieval charge (per GB)
	* Monthly tiering fee (only for intelligent Tiering)
	* Data transfer fee
Free of cost:
	* Data transfer int Amazon S3
	* Data transfer from Amazon S3 to CloudFront
	* Data transfer from Amazon S3 to services in the same region

AWS S3 Glacier:
 * in addition to existing S3 storage class, S3 Glacier is a separate AWS Service on it  own!
 * Extremely low cost storage for archive and long term backups
 	> Old media content
 	> old patient details
 * High durability ( 11 9s)
 * High scalability (Unlimited storage)
 * High security

Amazon S3 and S3 Glacier:
----------------------------
Amazon S3 : * Terminology- objects(file) are stored in buckets(containers)
	    * Keys - Object keys are user defined
	    * Mutability - (Default) Allows uploading new content to object
	    * Max size - Each object can have max 5TB
	    * Encryption - optional 

Amazon S3 Glacier : * Terminology- archives(files) are stored in vaults(containers)
	   	    * Keys - archive keys are system generated identifiers
	    	    * Mutability - after an archive is created it cann't be updated.
	    	    * Max size - Each archive can have max 40TB
	   	    * Encryption - mandatory  using AWS managed keys and AES-256

Block Storage:
----------------
* use case : Hard disk attached to your computers
* Typically ONE block storage device can be connected to ONE virtual server
* Also Multiple block storage device can connect ONE virtual server

File Storage:
-------------
* media workflow
* Enterprice users need a quick way to share files in secure and organized way.
* files are shared by many virtual server( many to many relationship)
 

AWS Block storage and File storage:
------------------------------------

Block storage : * Amazon Elastick Block Storage[EBS].
		* Instance store.

File storage :  * Amazon EFS(for Linux instance)
		* Amazon FSx windows file servers.
		* Amazon FSx foe Lustre (high performance use cases)


EC2 Block Storage:
-----------------
Two popular block storage attached to the EC2 Instance.
1)EBS
2)Instance storage

* Instance Storage are physicaly attached to the EC2 instance
	> Temporary data.[Ephemeral storage]
	> Lifecycle tied to EC2 instance.
	> Only some of EC2 instance support instance store.
	Advantages:
	--> Very Fast I/O(2-100x of EBS)
	--> (cost effective) no extra cost.It include in EC2 instance
	--> Ideal for storing temporary infomation - cache, scrach files
	DisAdvantages:
	-->Slow boot up(up to 5 minutes)
	--> Ephemeral data ( data loss when hardware fails, instance terminate)
	-->Cann't take snapshot.
	--> Fixed size storage based on instance type.
	--> you cann't detach and attach it to another EC2 instance

* Elastic Block Store[EBS] is network storage.
	> More durable 
	> Lifecycle not tied to Ec2 instance
	> provisioned capacity [ based on how much data storage we needed, like 1GB-> N GB]
	> Very Flexible( if needs increase or decrease size)
	> Independent lifecycle from EC2 instance 
		* Attach/ Detach From One EC2 instance to another
	> 4 9's availability and replicated within the same AZ.
	> Use case : Run your custom data base

Amazon EFS:
-----------
* petabyte scale, Auto scaling, pay for use shared file storage.
* Compatible with amazon EC2 Linux-based instances.
* Usecases: home directories,file share,content management.
* (Alternate) Amazon FSx for Lustre
* Amazon FSx windows file servers.


AWS Storage File Gateway:
-------------------------
* problem statement: Large on-premise(inside storage service) file share with terabyte of data. 
* AWS storage file gateway provides cloud storage for your file shares.

AWS Storage Tape Gateway:
-------------------------
* Tape backups used in enterprises(archives).
* Avoid physical tape backups.
* No change needed for tape backup infrastructure.
* Backup data to virtual tapes(Amazon S3 & S3 Glacier).

AWS Storage Valume Gateway:
---------------------------
* Volume Gateway: Move block storage to cloud.
* Automate backup and disaster recovery
* Option-1 Cached (Gateway cached volumes) --> Primary data stored in Amazon S3, On-premises cache stores frequently accessed data.
* Option-2 Stored (Gateway Stored volumes) --> primary data stored -on premises, Asynchronous copy to AWS, Stored as EBS snapshot.


DataBase - Add a Standby:
--------------------------
* Let's add a standby database in the second data center with replication.
* Let's consider some challenges:
	1) Your database will go down if the data center crashes.[solved]
		> you can switch to the standby database.
	2) You will lose the data if database is crashes.
	3) Database will slow when you take snapshots.

Availability and Durability:
---------------------------------
Availability
 * will be able to access my data now and when I need it?
 * Percentage of time an application provides operations expected of it.
Durability
 * will my data be available after 10, 100, 1000 years?

Availability four 9's
Durability  eleven 9's


DataBase Terminology: RTO and RPO:
-----------------------------------
RPO:[Recovery point objective] --> Maximum acceptable period of data loss.
RTO:[Recovery Time Objective]  --> Maximum acceptable down time.



DataBase - Read Replicas:
---------------------------
* Add Read Replica
* Connect reporting and analytics applications to read replica.
* Reduce the load on the master database.
* Upgrade read replica to master database.
* create read replicas in multiple regions.
* take snapshots from read replicas.
* They not have synchronous application.

Database - Consistency:
------------------------
1) Strong Consistency --> Synchronous replication to all replicas.
				will be slow if have multiple replicas or standby.
2) Eventual Consistency --> Asynchronous replication. A littel lag- few seconds-before the change is available in all replicas
		> In the intermediate period, different replicas might return different values.
		> Used when scalability is more importent then data ingrity.
			ex: facebook,instagram,twitter
3) Read After Write Consistency --> Inserts are immediately available. update and delete are eventually consistent.
		> Amazon S3 provides read after write consistency.

Database - Categories:
-----------------------

Relational Database:
---------------------
* only option until a decade back.
* Most popular database.
* predefined schema.
* supports Complex SQL query.
* very strong transactional capabilities.
* uses	OLTP [online transaction processing]
	OLAP [online analytics processing]

RDS Features:
* Multi-AZ deployments(standby in another AZ)
* Read replicas:
	> same AZ
	> multi Az
	> cross region
* Storage auto scaling (upto configured limit)
* Automated backups(restore to point in time)
* Manual snapshots


AWS RDS You & AWS:
-------------------
AWS is responsible for:
 * Availability
 * Durability
 * scaling
 * maintenance
 * backups

Your responsible for:
 * Managing database users
 * App optimizations(indexes,tables)

You cannot:
* SSH into database EC2 instances or setup custom software (Not allowed).
* Install OS or DB patches.


AWS Redshift:
--------------
* same as RDS
* optimized for online transaction both read and write.
* OLAP workloads have exponentially larger reads on the database compared to writes.
* Redshift is petabyte scale distributed data ware house based on postgresSQL.

Important characterstics:
 * massively parallel processing (MPP) : Storage and processing can be split across multiple nodes.
 * Columnar data storage.
 * High data compression.

As a Result:
 * A single row of data might be stored in multiple nodes.
 * A query to Redshift leader node is distributed to multiple compute nodes for execution.

Start with single node configuration and end with multi node configuration.
We can dynamically add node and remove node.

Used For:
 * traditional ETL(Extract,Transform,Load), OLTP and BI.
 * Supports standard SQL 
 * Integration with data Loading ,reporting, mining and analytics tools.


Amazon EMR - [Elastic MapReduce]:
------------------------------------
* Managed Hadoop Service with high availability and durability.
* EMR gives access to uderlying OS  => you can SSH into it.
* Imporatant tools in Hadoop eco system are natively supported.
* install other using bootstrap actions 
* Use case:
 > Log priocessing insights
 > Steam advertisers
 
Documents DataBase:


Key-Value Database:
--------------------
* Use a simple key-value pair data to store data.key is unique identifier.
* Values can be Objects.
* Adv:- Horizontally scalable to terabytes of data with milisecond response.
* use : Shoping cart and game applications.


Amazon DynamoDB :
------------------
* Fast and scalable
* Flexible NoSQL Key-Value and document database(schemaless).
* Don't worry about scalable,availability and durability
* No need to provision a database
* provides an expensive serverless mode

Hierarchy:- Table > Item(s) > attribute(key value pair)
maximum 400kb per item in table.


Amazon ElastiCache:
--------------------
* Hihly scalable & low latency in memory data store.
* used for distributed caching
* ElastiCache Memcached
	> Low mentainance
	> Easy horizontal scaling 
	> use: speed up database-driven website to cache data



Amazon VPC [Virtual Private Cloud] :
----------------------------------------
* Your own isolated network in  AWS cloud.
	> visible within own vpc not other vpc.
* You can control all the traffic coming in and going outside vpc.
* create all  your AWS resources within the VPC.
	> It helps secure resources and comunication.
* Need for VPC Subnets: [user-->ELB-->EC2 Instance-->DataBase]
	> ELB is accessiable to Internet.
	> DB and EC2 Instance should not be accessiable to Internet.

VPC Subnets:
-------------
* Create different subnet for public and private resources.
* Each VPC create in Region.
* Each Subnet is created in Availability Zone.
	Ex: US-east-1a or 1b,


Subnet <---> Internet Gateway <---> Internet

NAT GateWay: [Network Address Translation]
-------------------------------------------
* NAT Gateway : Managed service
* NAT Instance : Install EC2 instance with a specific NAT AMI and Configure as gateway.
* Egress only Internet Gateway: for IPv6 subnets..

NAT Gateway:
--------------
* Managed By AWS
* created in public subnet
* Internet Gateway needed
* high availability In AZ or Multi AZ.

NAT Instance:
-------------
* Managed By You
* created in public subnet
* Internet Gateway needed
* defends on you as high availability.

NACL [Network Access Control List] :
------------------------------------
* Security group control traffic in a specific resource in a subnet.
* How about stopping the traffic from even entering the subnet?
* NACL provide stateless firewall at subnet lavel.
* Each subnet must be associated with NACL.
* Default NACL allows all inbound and outbound traffic.
* Custome created NACL denies all inbound outbound traffic by default.
* Rules have priority number.
	Lower number = Higher priority.


Security Group vs NACL :
-------------------------

User <---> NACL  Subnet <--> security group <---> EC2


VPC Flow Logs:
--------------
* Monitor Network traffic.
* Troubleshoot connectivity issues (misconfiguration of NACL/SG)
* Capture traffic going in and out traffic in VPC
* can be created by vpc and subnet.
* publish log to amazon cloudwatch logs or Amazon S3.
* Flow Log records contains Accept/Rejects.



AWS and On-Primises Overview:
--------------------------------

1)Data center ----> Internet ----> VPN connection ----> AWS
2) data center --------> AWS



IAM Fundamentals:[Identity Access Management]
------------------------------------------------
* Authentication [is it right use]
* Authorization [do they have right access]
* Identities: AWS users and Federated users
* Provides a very granular control.

AWS KMS:
------------
*KMS-->Key Management Service
* create and manage a cryptographic keys (symetric and asymetric )
* control there use in your AWS applications.
* Automatically rotate amasterkey once a year
* schedule key delation to verify if the key is used
	> Mandatory minimum wait period of 7 days(max 30days).

AWS CloudHSM:
---------------
* Managed dedicated sinle tenant, Hardware security Module.
*

AWS Inspector:
--------------
* Automated security scanning
* Discover AWS workLoads.
* Security
* Compliance
* Continuous monitoring


AWS CloudTrails:
-----------------
* Track events, API calls, changes made to your AWS resources.
* Compliance with regulatory standards
* Troubleshoting Locate a missing resource.
* delivers log files to s3.

AWS Config and AWS Config Rules:
--------------------------------
* Auditing: create complete inventory of your AWS resources
* Resource history and change tracking
* Governance
* Consistance rules and compliance across AWS accounts.


Asynchronous Communication:
------------------------------

synchronous communication:-  web service-->Logging service-->database
	 One application is go down other also go down

Asynchronous:
	Web server --> queue --> Logging server -->  database
  multiple logging server is possible.

SQS:[simple queuing service]
----
High availibility,Low cost,reliable,scalable, fully managed service.

	
SNS:[Simple Notification service]
-----
* pub-sub paradigm.
* broadcost asynchronous event notifications
* provides mobile and enterprise messaging web services.
* SNS does not need SQS or Queue.


MQ:
--------
* managed message broker service for Apache ActiveMQ.
* MQ=SQS+SNS
* supports traditional API


Routing and Content delivery service:
--------------------------------------
Content delivery network:[CDN]
 * you want to delivery content to your global audience.
 * Multiple edge locations are there in the world.

Amazon CloudFront : Distrubuted Content to the nearest edge location.


Route 53:
----------
* Route 53 = Domain Registar + DNS
	Buy your domain name
	Setup your DNS routing for ABC.com
User -->Route53 --> multiple ELB
 Congifure Multiple ELB by the help of Route 53.


AWS Snowball:
--------------
* transfer the dozens of terabytes to petabytes of data from on-primisis to AWS.



Amazon Kinesis:
---------------
* Handle streaming data, -->Not recomended for ETL batch.
* Amazon kinesis data stream --> process a data stream.
* Amazon kinesis firehose --> data ingestion for streaming data: s3, elasticsearch
* Amazon kinesis Analytics --> Run queries againt  streaming data
* Amazon kinesis video stream -->Monitor video streams.

AWS CloudFormation:
-----------------------
* All Configuration is defined in a simple text file JSON or YAML.
* CloudFormation understands dependencies
* Automatic rollbacks on errors
* version control your configuration file and make changes to it overtime
* Free to use 

Terminology 
* Template: A Cloudformation JSON or YAML defining multiple resources
* Stack: A group of resources that are created from a cloudformation template
*Change Sets : To make changes to stack,update the template




Q&A Review
=================
AWS cloud Advantages:
 * Trade fixed expense for variable expense(pay only when you consume)
 * Benefit from massive economies of scale(Lower pay-as you go prices)
 * Stop guessing capacity(scale up & down as required(Elastic))
 * Increase speed and agility
 * stop sending money maintaing data center
 * go globle in minute.

AWS Compute options:
 * EC2 : Virtual machines in the cloud.
 * EC2 Auto scaling : Add/Remove EC2 instances based on Load, Monitor and Replace unhealthy instances(Auto scaling group)
 * Elastic Load Balancing : Load Balance between multiple EC2 instances
 * AWS Elastic BeanStaclk : Simplified Deployment of EC2 instances
 * Amazon ECS : AWS Specific Container Orchestration
 * AWS Farget : AWS serverless ECS
 * Amazon EKS : Kubernet based Container Orchestation
 * AWS Lamda : Serverless Compute (pay for invocation), Only for short duration workloads.
 * AWS Batch : Run batch applications on AWS.

AWS Storage Options:
 * Elastic Block Storage(EBS) : Network Block Storage, More durability,Attach and Detach as needed.
 * Instance Store : Ephemeral Attached Block Storage, Lifecycle tied to EC2 instance.
 * Elastic File Store(EFS) : Scaleable file storage, for linux based applications, supports NFS protocol
 * Amazon FSx for windows file server: Managed windows based  file storage supports SMB protocol
 * Amazon S3 : Serverless object storage
	Flexible->Standard(frequently accessed data),Glaicer(Archive data)
	Inteligent->Tiering (unknown access patterns)
	Supports Versioning: prevent accidental deletion
	Create low latency static website with Amazon cloudFront
 * AWS Storage Gateway: (Hybrid Storage (on-premise-cloud))
	AWS file storage Gateway(Hybrid file share)
	AWS Storage Tape Gateway(Tape backups)
	AWS storage volume Gateway(Hybrid block storage)

AWS DataBase & Caching Options:
------------------------------------
* Amazon RDS: Managed Relational OLTP Databases
MySQL, SQL Server, Oracle, DB2, MariaDB, PostgreSQL
* Amazon Aurora: Global Relational Database with Serverless Option
MySQL, PostGreSQL compatible
* Amazon DynamoDB: Serverless NoSQL/Non Relational database
Single-digit millisecond responses for million of TPS
* Amazon Neptune: Graph Database
Store & navigate data with complex relationships
* Amazon Redshift: Relational OLAP Database (Datawarehouse)
Petabyte scale with a serverless option (Reduced Management)
* Amazon ElastiCache: In memory database/cache
Option 1: Redis(persistent - leader boards)
Option 2: Memcached (non-persistent - pure cache)


Networking & Content Delivery in AWS
------------------------------------------------
* Amazon VPC: Virtual Network to secure resources
* Subnet: Separate private & public resources
* Internet Gateway: Allows Public Subnets to accept traffic to/from internet
* NAT Gateway: Allow internet traffic from private subnets
* Security Group: Control traffic at an instance level
* NACL: Control traffic at Subnet level
* VPC Peering: Connect one VPC with other VPCs
* VPC Flow Logs: Enable logs to debug problems
Monitor traffic In & Out of VPC
* AWS Direct Connect: Dedicated, fast, private connection to on-prem
* AWS VPN: Encrypted tunnel over internet to on-premises
* Amazon Route 53: Highly Available Global DNS service
* Amazon CloudFront: Distribute content from edge locations
Users get lower latency (ex: S3 static website)
* Global Accelerator: Static IP routes to closest endpoint (EC2, ELB, .. )
Faster connections for global users (Edge locations)

Authentication, Authorization & Encryption in AWS:
-----------------------------------------------------
* AWS IAM: Control Access to AWS resources
Who can access AWS resources (authentication)
What can they do (authorization)
* IAM users: Users created in an AWS account
* IAM groups: Collection of IAM users
* IAM roles: Temporary identities without credentials
* IAM policies: Define permissions
* Attach with IAM users, IAM groups & IAM roles
* Amazon Cognito: Web/Mobile App User Auth. & Authorization
Supports SAML & Social Media Logins
* AWS KMS: Create keys & encrypt your data
Integration with Storage, Database & other AWS services

IAM Best Practices:
-------------------------
* Users - Create individual users
* Groups - Manage permissions with groups
* Permissions - Grant least privilege
* Auditing - Turn on AWS CloudTrail
* Password - Configure a strong password policy
* MFA - Enable MFA for privileged users
* Roles - Use IAM roles for Amazon EC2 instances
* Sharing - Use IAM roles to share access
* Rotate - Rotate security credentials regularly
* Root - Reduce or remove use of root

DevOps in AWS
-----------------------
* CI/CD orchestration: AWS CodePipeline
* Observability - Tracing: X-Ray
* Observability - Metrics & Alarms: CloudWatch
* Observability - Logging: CloudWatch
* laC - AWS CloudFormation: YAML/JSON based scripts
* Stack Set: Provision same resources in multiple regions
* laC - AWS CDK: laC in your favorite programming language
* laC - AWS SAM: Easy provisioning & deployment of Serverless apps
* App Configuration - Secrets: Secret Manager
Flexible Auto Rotation + Costlier + Integration with RDS, .. +
*App Configuration - App Config + Secrets: Parameter Store
Secrets + Configuration + Cost Effective

Versioning and Source Control: AWS CodeCommit (Git)
Build and Test Code: AWS CodeBuild
Automate Deployment: AWS CodeDeploy


Playing with AWS:
-------------------------
* AWS CLI: Interact with AWS services from command line
Write scripts to automate as needed
* Best for: Users comfortable with CLI
* AWS CloudShell: Browser-based command line interface
No need to configure software on your machine
* Best for: Users who want to use command line from the browser
* AWS Management Console: Web-based GUI
Access & manage AWS resources
* Best for: Users that prefer a GUI to interact with AWS
* AWS SDK: Call AWS services from your code
Libraries available for various programming languages
* Best for: Integrate AWS services into their apps
* laC: AWS CloudFormation, AWS CDK, AWS SAM

Loose Coupling in AWS:
---------------------------------------------
* Amazon SQS: Push, Pull Messaging
Decoupling microservices for scalability
* Amazon SNS: Publish subscribe pattern
Bulk notifications & Mobile push support (Email + SMS)
* Amazon EventBridge: Build event-driven architectures
React to events generated from AWS services, SaaS & custom apps
EventBridge Scheduler provides scheduling services
* Amazon Kinesis: Real-time data streaming & analytics
Process & analyze streaming data (for example, from IOT device) at scale
* Amazon MSK: Managed Service for Apache Kafka
Fully managed, highly available Kafka service
* AWS Step Functions: Workflow service to automate processes
Orchestrate serverless workflows with vişual drag-and-drop interface
Amazon Simple Email Service (Amazon SES): Managed email service
High deliverability & scalable email service

Analytics & Intelligence in AWS:
-------------------------------------------------
* Amazon Redshift: Relational OLAP Database (Datawarehouse)
Petabyte scale with a serverless option (Reduced Management)
* Amazon EMR (Elastic MapReduce): Big data framework service
Big data using Spark, Hadoop
* AWS Glue: Discover, prepare, and integrate data at any scale
Serverless data preparation & load service (ETL)
* Amazon Athena: Run serverless SQL on Amazon S3 data
Ad-hoc data querying without server setup
* Amazon QuickSight: Visualization
Business Intelligence Dashboards for insights
NLP powered by machine learning for easier analysis
* Amazon Elasticsearch Service (Amazon ES): Search & analytics engine
Real-time application monitoring & log analysis

Machine Learning in AWS
---------------------------------------
* Build Simple Models: Amazon SageMaker Auto ML
Without needing data scientists
Needs Limited/no-code experience
* Build Complex Models: Amazon SageMaker
Needs data scientists & team

Pre-Built Models-->

Amazon Comprehend: Analyze Unstructured Text
Amazon Rekognition: Search & Analyze Images & Videos
Amazon Transcribe: Powerful Speech Recognition
Amazon Polly: Turn Text into Lifelike Speech
Amazon Translate: Powerful Neural Machine Translation
Amazon Personalize: Add real-time recommendations to your apps
Amazon Forecast: Time-series forecasting service
Amazon Lex: Build Voice & Text Chatbots
Amazon Bedrock: Access Generative Al Foundation Models

Simplifying Governance in AWS:
-------------------------------------------------
* AWS Artifact: Get access to AWS security & compliance reports
* AWS Service Catalog: Create & govern curated laC templates
* AWS Market Place: Deploy Third Party Applications Quickly
* gAWS Trusted Advisor: Get recommendations from AWS
Cost optimization, Performance, Security
Fault tolerance (resiliency), Service limits, Operational Excellence
Checks SG rules allowing unrestricted access - 0.0.0.0/0
* Amazon CloudTrail: Audit AWS Service calls
Track all activity on AWS services
Ex: Track EC2 instance start/stop events
Ex: Monitor EBS volume creation/deletion
Ex: Monitor security group modifications
Ex: Monitor bucket creation/deletion

Managing Multiple AWS Accounts:
------------------------------------------------------------
* AWS Organizations: Centralized mgmt for multiple AWS Accounts
Create separate AWS accounts for different business units
Create separate AWS accounts for different environments
* Consolidated Billing: Get one bill across multiple accounts
Feature of AWS Organizations
Get discounts at enterprise level
* AWS IAM Identity Center: Manage IAM for multiple AWS Accounts
Centrally create & connect your workforce identities
Streamline single sign-on access on AWS
* AWS Firewall Manager: Manage Firewalls across multiple AWS Accounts
Supports Security Groups, WAF, Shield, ..
Automatically enforce your defined security policies

Managing Costs in AWS:
--------------------------------------------
* AWS Billing & Cost Management: Centralized dashboard
Manage your payment methods, Pay your bills
* Pricing Calculator: Estimate cost of AWS resources
* AWS Budgets: Set a Budget
Get alerts from CloudWatch when you exceed the budget
* ]AWS Cost Explorer: Visualize your AWS costs
Get Right Sizing Recommendations
Filter by Region, AZ, tags etc
See future cost projection
* AWS Compute Optimizer: Resource optimization recommendations
RightSizing for EC2, ECS, Lambda, EBS
Free to use but pay for resources provisioned
AWS Management Console, AWS CloudFormation, AWS Organizations, ...
FREE: AWS Cost Explorer (UI), Identity & Access Management (IAM), ...



Improving Your Security Posture in AWS
-------------------------------------------------
* AWS Security Hub: Cloud security posture mgmt (CSPM) service
Automate security best practice checks
Aggregate security alerts into a single place
Understand overall security posture across multiple AWS accounts
* AWS WAF: Block SQL Injection + XSS
Protect your web applications from OWASP Top 10 exploits
Can be deployed on CloudFront, ALB, API Gateway, ..
* AWS Inspector: Automated vulnerability mgmt
Discover software vulnerabilities & unintended network exposure
Discovers & scans EC2 instances, container images, & Lambda fns
* Amazon Macie: Detect Pll in S3
Recognize & classify sensitive data
* AWS Shield: Always-on DDoS protection
Integrates with Route 53, CloudFront, EC2, ELB ..

AWS Well-Architected Framework - Pillars
-----------------------------------------------
* Operational excellence: Ability to support development
Run workloads effectively
Gain insight into operations and continuously improve
* Security: Ability to protect data, systems, & assets
* Reliability: Ability of a workload to perform its intended function
Correctly and Consistently
Performance efficiency: Ability to use computing resources efficiently
Maintain that efficiency as demand changes and technologies evolve
* Cost optimization: Ability to run systems at the lowest price point
Sustainability: Meet needs without impacting future generations

AWS Well-Architected Framework - Design Principles
----------------------------------------------------------
* Operational excellence: Use managed services
Perform operations as code
Frequent, small, reversible changes
Anticipate & learn from failure
* Security: Apply security at all layers
Protect data in transit & at rest
Maintain traceability
* Reliability: Automatically recover from failure
Scale horizontally, Stop guessing capacity
Manage change with automation
Performance efficiency: Go global in minutes
Experiment more often, Use serverless architectures
* Cost optimization: Implement Cloud Financial Management
Analyze & attribute expenditure
* Sustainability: Understand your impact, Establish goals
Maximize utilization, Reduce the downstream impact

AWS CAF (Cloud Adoption Framework):
-----------------------------------------
* AWS CAF: Framework to guide your cloud adoption
* Envision phase: Identify & prioritize opportunities
Define success metrics and desired outcomes
* Align phase: Identify capability gaps
Address gaps through upskilling, ...
* Launch phase: Deliver pilot initiatives
Execute pilot projects
Iterate and learn from initial deployments
* Scale phase: Expand & deliver business value
Expand successful pilots
Continuously optimize your cloud environment

AWS CAF Capabilities:
---------------------------------
* Business: Strategy Mgmt, Product Mgmt, Portfolio Mgmt
Innovation Mgmt, Data Monetization, Strategic Partnership
* People: Organizational Alignment, Organization Design
Culture Evolution, Cloud Fluency
* Governance: Program & Project Mgmt, Cloud Financial Mgmt,
Application Portfolio Mgmt, Risk Mgmt, Data Curation, Data Governance
* Platform: Architecture, Provisioning & Orchestration
Modern Appln Development, Data Engineering, Data Architecture, CI/CD
* Security (CIA): Identity & Access Mgmt, Infrastructure Protection
Vulnerability Mgmt, Incident Response, Application Security
Threat Detection, Data Protection, Security Assurance
* Operations: Event Mgmt (AIOps), Incident & Problem Mgmt
Configuration Mgmt, Application Mgmt, Patch Mgmt,
Availability & Continuity Mgmt, Observability, Change & Release Mgmt

Managing Your AWS Migration:
-------------------------------------------------
* AWS Migration Hub: Streamlines Migration Oversight
Central hub for tracking migration progress
* Application Discovery Service: During initial analysis and planning
Collect on-premise infrastructure data
* AWS Migration Evaluator: Focus on financial and technical feasibility
Understand the implications, costs, and technical considerations of migration
Identify the right AWS services and configurations (right-sizing) for your needs
* Database Migration Service (DMS): Seamless Database Transition
Ensures minimal downtime for critical database workloads
* Snowmobile: Securely transfers petabytes and exabytes of data
Recommended for >10 Petabytes
* Snowball Edge: Enhanced Data Transfer & Edge Computing
Offers offline data transfer & local computing capabilities
Suitable for remote or disconnected environments
* AWS DataSync: Accelerated Online Data Transfer
Automates data synchronization tasks
































































































































































AWS EKS:
*******************************

Docker: 
-------------
* is a Container Platform (make it is). weather using docker engine or dockert CLI.
* Ephemeral containers ( lack off problem in container or storage or die).
* It has a Single Host (docker problem)
* Auto Healing (containers are not dealed automatically)(user-->killed container-->app-->not accessible).(docker problem)
* Auto Scaling (docker problem).
* Does not support enterprice lavel.



Kbernetes:
-------------------
* is Container Orchestration Platform 
* Cluster (Group of nodes). pualty node
* Replication Controller[Relica center]
* Heal-> Kubernet controls(fix the damage)
	Container down --> API server and Rollout a New 
		create new container and solve the auto healing problem.
* supports enterprice lavel

K8s Architecture:
-------------------

Control plane :
-----------------
* API Server
* ETCD
* Scheduler
* Controller
* CCM

Data plane :
--------------
* Kubelet
* prony
* Container Runtime



Components on worker node :
* Pods
 > Container runtime ---> responssible for running containers)
 > Kubelet --> creation of pods ( not in running state take some actions pods).
 > Kube proxy. ---> Basically Networking (generationing the IP address and Load balancing)(Basically IP tables on linux machine)

Components of Master node :
* Pods
  > API Server --> take some action
  > ETCD --> key value data store
  > Scheduler  -->schedule some procedure
  > Controller --> comntrol inbuilt proccess
  > CCM --> cloud conytroller manager

CCM:
Running kubernet on cloud platforms, EKS,AKS,GKE



* In kubenet is deal with YAML files.

Pod: 
-----
* is a contains one or more Containers.

Kubectl install:
-------------------
* Downloads curl.exe -LO "https://dl.k8s.io/release/v1.29.2/bin/windows/amd64/kubectl.exe".
* Downloads kubectl version
	Inside install of kubectl:
		> downloads minikubes, k8s, kind, microk8s

Downloads minikube start
Downloads VM -->Single node Kubernetes cluster

Downloads kubectl get nodes

Downloads vi pod.yml 
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80
Downloads kubectl create -f pod.yml 
Downloads kubectl delete pod nameof pod
Downloads kubectl describe pod podname

Kubernet deployment:
------------------------

Container:
--------------------,
Docker command : docker run -it image name -p v,--net,etc


Pod:
-----------
pod yaml file(contains all), running specification


Depolyment: 
----------------
Healing. scaling



kubectl get all
kubectl get all -A

kubectl apply -f pod.yml -->create cluster
kubectl get pods -o wide --> give details of pod
kubectl apply -f deployment.yml

realtime create pod is like a [deploy-->rs-->pod]


Kubernets service:
------------------------
Three types
1)Cluster IP Mode
2)Node port Mode
3)Load Balancer Mode


Ingress:
------------







































































































































Exam preparation :
*******************************

AWS Cloud concepts
Security and compliance in the AWS Cloud
Core AWS services
Economics of the AWS Cloud

Domain 1:  Cloud Concepts
Lesson 1: Introduction to Cloud Concepts
Lesson 2: Define the benefits of the AWS Cloud
Lesson 3: Identify design principles of the AWS Cloud
Lesson 4: Understand the benefits of the strategies for migration to the AWS Cloud
Lesson 5: Understand the concepts of cloud economics
Lesson 6: Walkthrough question 1
Lesson 7: Walkthrough question 2
Additional resources


Domain 2: Security and Compliance
Lesson 1: Introduction to Security and Compliance
Lesson 2: Understand the Shared Responsibility Model
Lesson 3: Understand Cloud security, governance, and compliance concepts
Lesson 4: Identify AWS access management capabilities
Lesson 5: Identify components and resources for security
Lesson 6: Walkthrough question 3
Lesson 7: Walkthrough question 4
Additional resources


Domain 3: Cloud Technology and Services
Lesson 1: Introduction to Cloud Technology and Services
Lesson 2: Define methods of deploying and operating in the AWS Cloud
Lesson 3: Define the AWS global infrastructure
Lesson 4: Identify AWS compute resources
Lesson 5: Identify AWS database resources
Lesson 6: Identify AWS network resources
Lesson 7: Identify AWS storage resources
Lesson 8: Identify AWS artificial intelligence and machine learning services and analytics services
Lesson 9: Identify services from other in-scope AWS service categories
Lesson 10: Walkthrough question 5
Lesson 11: Walkthrough question 6
Additional resources


Domain 4: Billing, Pricing, and Support
Lesson 1: Introduction to Billing, Pricing, and Support
Lesson 2: Compare AWS pricing models
Lesson 3: Understand resources for billing, budget, and cost management
Lesson 4: Identify AWS technical resources and AWS Support options
Lesson 5: Walkthrough question 7
Lesson 6: Walkthrough question 8
Additional resources







































************AWS Developer certificate course :!###########



Leverage server on the cloud









































































































































